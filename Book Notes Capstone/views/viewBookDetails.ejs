<%- include('partials/header.ejs'); -%>
<%- include('partials/navbar.ejs'); -%>

<div class="hero-section note px-4 pb-5 mb-5 text-center book-detail" style="background-image: url('<%= book.cover_url %>');">
</div>

<div class="container py-5">
  <div class="card shadow book-card book-card--detail">
    <div class="row g-0 align-items-center">
      
      <div class="col-md-5">
        <img src="<%= book.cover_url %>" 
             alt="Book Cover" 
             class="img-fluid rounded-start book-cover">
      </div>

      <div class="col-md-7">
        <div class="card-body">
          <!-- Edit Toggle Button -->
          <div class="text-end mb-3">
            <button id="toggleEdit" class="btn btn-outline-secondary">
              <i class="bi bi-pencil"></i> Edit Book
            </button>
          </div>

          <!-- View Mode -->
          <div id="viewMode">
            <h2 class="fw-bold"><%= book.title %></h2>
            <h5 class="text-muted mb-3"><%= book.author %></h5>

            <div class="mb-3">
              <strong>Started:</strong> <%= formatDate(book.date_started) %><br>
              <strong>Finished:</strong> <%= book.date_finished ? formatDate(book.date_finished) : 'Not finished yet' %>
            </div>

            <div class="notes-section mb-3">
              <h6 class="fw-semibold">Notes:</h6>
              <p style="white-space: pre-line;">
                <%- book.note %>
              </p>
            </div>

            <div class="mb-3">
              <h6 class="fw-semibold">Rating:</h6>
              <div class="book-rating">
              <div class="stars">
                <% for (let star = 1; star <= 5; star++) { %>
                <div class="star-wrapper <%= book.rating >= star ? 'selected-full' : book.rating >= star - 0.5 ? 'selected-half' : '' %>" 
                   data-rating="<%= star %>">
                   <i class="far fa-star empty-star"></i>
                   <i class="fas fa-star-half-alt half-star"></i>
                   <i class="fas fa-star full-star"></i>
                </div>
                <% } %>
              </div>
              <span class="ms-2"><%= book.rating %></span>
              </div>
            </div>

            <a href="/" class="btn btn-outline-primary">‚Üê Back</a>
          </div>

          <!-- Edit Mode (Initially Hidden) -->
          <form id="editMode" action="/books/<%= book.id %>/update" method="POST" style="display: none;">
            <div class="mb-3">
              <label for="title" class="form-label">Title</label>
              <input type="text" class="form-control" id="title" name="title" value="<%= book.title %>" required>
            </div>

            <div class="mb-3">
              <label for="author" class="form-label">Author</label>
              <input type="text" class="form-control" id="author" name="author" value="<%= book.author %>" required>
            </div>


            <div class="mb-3">
              <label for="date_started" class="form-label">Started Date</label>
              <input type="date" class="form-control" id="date_started" name="date_started" value="<%= new Date(book.date_started).toISOString().split('T')[0] %>">
            </div>

            <div class="mb-3">
              <label for="date_finished" class="form-label">Finished Date</label>
              <input type="date" class="form-control" id="date_finished" name="date_finished" 
                     value="<%= book.date_finished ? new Date(book.date_finished).toISOString().split('T')[0] : '' %>">
            </div>

            <div class="mb-3">
              <label for="note" class="form-label">Notes</label>
              <textarea class="form-control" id="note" name="note" rows="4"><%- book.note %></textarea>
            </div>

            <div class="mb-3">
              <label for="rating" class="form-label">Rating</label>
              <div class="book-rating edit-mode">
                <div class="stars">
                  <% for (let star = 1; star <= 5; star++) { %>
                    <div class="star-wrapper <%= book.rating >= star ? 'selected-full' : book.rating >= star - 0.5 ? 'selected-half' : '' %>" 
                         data-rating="<%= star %>">
                         <i class="far fa-star empty-star"></i>
                         <i class="fas fa-star-half-alt half-star"></i>
                         <i class="fas fa-star full-star"></i>
                    </div>
                  <% } %>
                </div>
                <input type="hidden" id="edit_rating" name="rating" value="<%= book.rating %>">
              </div>
              <div class="rating-feedback mt-2 text-muted"></div>
            </div>

            <div class="d-flex justify-content-between">
              <button type="button" id="cancelEdit" class="btn btn-outline-secondary">Cancel</button>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let currentHover = 0; // The current hover rating. THis will be used to check if currently hovering or not.

  function toggleEditMode(showEdit) {
    const viewMode = document.getElementById('viewMode');
    const editMode = document.getElementById('editMode');
    viewMode.style.display = showEdit ? 'none' : 'block';
    editMode.style.display = showEdit ? 'block' : 'none';
  }

  function feedbackTextBasedOnRating(rating) {
    const feedbackText = "Hover and click on left/right side of stars";

    const feedbackMessages = {
        0.5: "You wasted your time. Learn from this failure. Adapt. Move on. üìâ",
        1: "That book broke you, but you ain‚Äôt staying down. Find a better one. üî•",
        1.5: "You forced yourself to finish, but was it worth it? Demand more. üèãÔ∏è",
        2: "Mediocre effort. You don‚Äôt settle for average‚Äîwhy should your books? ‚öîÔ∏è",
        2.5: "Halfway decent, but halfway doesn‚Äôt cut it in life. Keep pushing. üöÄ",
        3: "Solid, but solid isn‚Äôt greatness. What did you LEARN? Apply it. üìñ",
        3.5: "This book had value, but don‚Äôt just read‚ÄîEXECUTE. Get after it. üî•",
        4: "That was strong! Take the lessons and make them count. No excuses. üíØ",
        4.5: "Great book! But greatness demands ACTION. Don‚Äôt just read‚ÄîLIVE IT. üöÄ",
        5: "This book is a WEAPON. If you don‚Äôt use what you learned, you wasted it. GO! üî•üí™",
    };

      const feedbackElement = document.querySelector('.rating-feedback');
      if (!feedbackElement) return;

      if (Object.prototype.hasOwnProperty.call(feedbackMessages, rating)) {
          feedbackElement.textContent = `Rating: ${rating}: ${feedbackMessages[rating]}`;
      } else {
          feedbackElement.textContent = feedbackText;
      }
    }

    function updateHoverDisplay(stars) {
    // Get all star elements    
    // Remove previous hover classes
    stars.forEach(star => {
      star.classList.remove('hover-half', 'hover-full');
    });
    
    // Check if hovering (currentHover > 0)
    if (currentHover > 0) {
      stars.forEach(star => {
        const starValue = parseFloat(star.dataset.rating);
        
        if (starValue <= currentHover) {
          star.classList.add('hover-full');
        } 
        else if (starValue - 0.5 === currentHover) {
          star.classList.add('hover-half');
        }
      });
    }
  }

  function updateStarDisplay(stars, rating) {
    stars.forEach(star => {
      star.classList.remove('selected-half', 'selected-full');
    });

    stars.forEach(star => {
      const starValue = parseFloat(star.dataset.rating);
      if (starValue <= rating) {
        star.classList.add('selected-full');
      } else if (starValue - 0.5 === rating) {
        star.classList.add('selected-half');
      }
    });
    feedbackTextBasedOnRating(rating);
  }

  function setupRatingStars(stars, ratingInput) {
    stars.forEach(star => {
      star.addEventListener('mousemove', function (event) {
        const rect = this.getBoundingClientRect();
        const isLeftHalf = event.clientX < rect.left + rect.width / 2;
        this.dataset.half = isLeftHalf ? 'true' : 'false';
        currentHover = parseInt(this.dataset.rating) - (isLeftHalf ? 0.5 : 0);
        updateHoverDisplay(stars);
      });

      star.addEventListener('mouseleave', function (event) {
        console.log('mouseleave');
        currentHover = 0;
        updateHoverDisplay(stars);        
      });

      star.addEventListener('click', function () {
        const selectedRating = parseInt(this.dataset.rating);
        const isHalf = this.dataset.half === 'true';
        const finalRating = isHalf ? selectedRating - 0.5 : selectedRating;
        ratingInput.value = finalRating;
        updateStarDisplay(stars, finalRating);
      });
    });
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('toggleEdit').addEventListener('click', () => toggleEditMode(true));
    document.getElementById('cancelEdit').addEventListener('click', () => toggleEditMode(false));

    const stars = document.querySelectorAll('.edit-mode .star-wrapper');
    const ratingInput = document.getElementById('edit_rating');
    setupRatingStars(stars, ratingInput);
    updateStarDisplay(stars, parseFloat(ratingInput.value));
  });
</script>

<%- include('partials/footer.ejs'); -%>